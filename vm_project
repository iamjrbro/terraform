MAIN

# Create Resource Group
resource "azurerm_resource_group" "rg-test" {
  name     = "rg-test-from-terraform"
  location = "centralus"
}

# Create Virtual Network (VNet)
resource "azurerm_virtual_network" "vnet-test" {
  name                = "vnet-test-from-terraform"
  address_space       = ["10.0.0.0/16"]
  location            = azurerm_resource_group.rg-test.location
  resource_group_name = azurerm_resource_group.rg-test.name
}

# Create subnet on VNet
resource "azurerm_subnet" "sub-test" {
  name                 = "sub-test-from-terraform"
  resource_group_name  = azurerm_resource_group.rg-test.name
  address_prefixes     = ["10.0.1.0/24"]
  virtual_network_name = azurerm_virtual_network.vnet-test.name
}

# Create Network Security Group (NSG)
resource "azurerm_network_security_group" "nsg-test" {
  name                = "nsg-test-from-terraform"
  location            = azurerm_resource_group.rg-test.location
  resource_group_name = azurerm_resource_group.rg-test.name

  security_rule {
    name                       = "SSH"
    priority                   = 1001
    direction                  = "Inbound"
    access                     = "Allow"
    protocol                   = "Tcp"
    source_port_range          = "*"
    destination_port_range     = "22"
    source_address_prefix      = "*"
    destination_address_prefix = "*"
  }
}

# Create Public IP
resource "azurerm_public_ip" "pip-test" {
  name                = "pip-test-from-terraform"
  location            = azurerm_resource_group.rg-test.location
  resource_group_name = azurerm_resource_group.rg-test.name
  allocation_method   = "Static"
}

# Create Network Internface
resource "azurerm_network_interface" "nic-test" {
  name                = "nic-test-from-terraform"
  location            = azurerm_resource_group.rg-test.location
  resource_group_name = azurerm_resource_group.rg-test.name

  ip_configuration {
    name                          = "internal"
    subnet_id                     = azurerm_subnet.sub-test.id
    private_ip_address_allocation = "Dynamic"
    public_ip_address_id          = azurerm_public_ip.pip-test.id
  }
}

# Create Virtual Machine Windows
resource "azurerm_virtual_machine" "vm-test" {
  name                  = "vm-test-from-terraform"
  location              = azurerm_resource_group.rg-test.location
  resource_group_name   = azurerm_resource_group.rg-test.name
  network_interface_ids = [azurerm_network_interface.nic-test.id]
  vm_size               = "Standard_DS1_v2"

  
  storage_image_reference {
    publisher = "MicrosoftWindowsServer"
    offer     = "WindowsServer"
    sku       = "2019-Datacenter"
    version   = "latest"
  }

  storage_os_disk {
    name              = "osdisk-test-from-terraform"
    caching           = "ReadWrite"
    create_option     = "FromImage"
    managed_disk_type = "Standard_LRS"
  }

  os_profile_windows_config {
    enable_automatic_updates = true
  }

  delete_os_disk_on_termination = true

  tags = {
    environment = "test"
    provisioner = "terraform"
  }
}


PROVIDER
provider "azurerm" {
  features {}
  subscription_id = "xxxx-xxxxxxx-xxxxxxxx-xxxxx-xxxx"
  client_id       = "xxxx-xxxxxxx-xxxxxxxx-xxxxx-xxxx"
  client_secret   = "xxxx-xxxxxxx-xxxxxxxx-xxxxx-xxxx"
  tenant_id       = "xxxx-xxxxxxx-xxxxxxxx-xxxxx-xxxx"
}

VERSIONS
terraform {
  required_providers {
    azurerm = {
      source  = "hashicorp/azurerm"
      version = ">= 3.28.0"
    }
  }
}
